http {
    # ----------------------------------------
    # Define a rate limit zone
    # ----------------------------------------
    # limit_req_zone → declares a shared memory zone used for rate limiting
    # $binary_remote_addr → the variable we use to identify the client (binary form of IP address)
    # zone=mylimit:10m → name the zone "mylimit", size 10 megabytes (~160k IPs tracked)
    # rate=10r/s → maximum average rate of 10 requests per second per IP
    limit_req_zone $binary_remote_addr zone=mylimit:10m rate=10r/s;

    # ----------------------------------------
    # Server block → defines how NGINX handles requests on a specific port
    # ----------------------------------------
    server {
        # listen 80 → accept HTTP traffic on port 80 (standard HTTP port)
        listen 80;

        # ----------------------------------------
        # Location block → defines rules for certain URL paths
        # "/" means match all requests
        # ----------------------------------------
        location / {
            # limit_req → applies the rate limit from the zone defined above
            # zone=mylimit → use the "mylimit" zone we created
            # burst=20 → allow a temporary burst of up to 20 extra requests
            # nodelay → process burst requests immediately instead of queuing
            limit_req zone=mylimit burst=20 nodelay;

            # proxy_pass → where to send the request if it passes the limit
            # http://backend:3000 → forward to a service named "backend" on port 3000
            # (In Docker Compose, "backend" is the service name; in plain local dev you’d use localhost)
            proxy_pass http://backend:3000;

            # ----------------------------------------
            # Pass along important HTTP headers to the backend
            # ----------------------------------------

            # Host header from the original request
            proxy_set_header Host $host;

            # Real IP address of the client
            proxy_set_header X-Real-IP $remote_addr;

            # Chain of IPs from proxies the request passed through
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # Original protocol used by the client (http or https)
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}
