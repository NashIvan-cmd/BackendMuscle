events {
    worker_connections 1024;
}

http { # Layer 7
    # Enable debug logging temporarily
    error_log /var/log/nginx/error.log debug;
    
    # Define a rate limit zone
    # $binary_remote_addr stores ip address in binary format
    limit_req_zone $binary_remote_addr zone=mylimit:10m rate=10r/s;

    # upstream backend {} # This is used to do load balancing
    # This is a simple round-robin load balancer
    # CHANGED: Updated to use correct container service names and ports
    upstream backend {
        server backend1:3000;  # Container name: backend1, internal port: 3000
        server backend2:3000;  # Container name: backend2, internal port: 3000
        server backend3:3000;  # Container name: backend3, internal port: 3000
        
        # Optional: Add load balancing method (default is round-robin)
        # least_conn;  # Route to server with least connections
        # ip_hash;     # Stick sessions to same server based on client IP
        # Uses 3000 for all ports because they serve the same application
        # Meaning they are not a server, api or other things
    }

    # The http {} can have many server
    server { # Server is called directives
        listen 80;
        server_name localhost;

        # Add logging to see which location is matched
        access_log /var/log/nginx/access.log;

        # ADDED: Health check endpoint for load balancer monitoring
        location /health {
            add_header X-Location-Matched "health-check" always;
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # ADDED: Root path should also proxy to backend (for your app routes)
        location / {
            # Add a custom header to verify this location is matched
            add_header X-Location-Matched "app-proxy" always;
            
            limit_req zone=mylimit burst=20 nodelay;
            
            # Pass requests to the backend service
            proxy_pass http://backend;
            # Set headers for the proxied request
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $server_name;
            proxy_redirect off;
            
            # ADDED: Timeout settings for better reliability
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # API routes - proxy to backend
        location /api/ {
            # Add a custom header to verify this location is matched
            add_header X-Location-Matched "api-proxy" always;
            
            limit_req zone=mylimit burst=20 nodelay;
            
            # Pass requests to the backend service
            proxy_pass http://backend;
            # Set headers for the proxied request
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $server_name;
            proxy_redirect off;
            
            # ADDED: Longer timeout for API calls
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # MOVED: Static files as fallback (lower priority than app routes)
        # This will only serve static files if no backend route matches
        location /static/ {
            add_header X-Location-Matched "static-files" always;
            root /usr/share/nginx/html;
            index index.html index.htm;
            try_files $uri $uri/ =404;
            
            # ADDED: Cache static files for better performance
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }

    # ADDED: Optional - Direct access to individual backends for debugging
    # Access individual servers at ports 8001, 8002, 8003
    server {
        listen 8001;
        server_name localhost;
        
        location / {
            add_header X-Backend-Server "backend1" always;
            proxy_pass http://backend1:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }

    server {
        listen 8002;
        server_name localhost;
        
        location / {
            add_header X-Backend-Server "backend2" always;
            proxy_pass http://backend2:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }

    server {
        listen 8003;
        server_name localhost;
        
        location / {
            add_header X-Backend-Server "backend3" always;
            proxy_pass http://backend3:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}